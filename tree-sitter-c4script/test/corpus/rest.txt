===
Include pragma
===

#include CLNK

---

(source_file
    (include (id)))

===
Strict pragmas
===

#strict
#strict 2

---

(source_file
    (pragma_strict)
    (pragma_strict))


=====
Simple var definition
=====

local name;

---

(source_file
    (var_definition (var_scope) (var_assignment (identifier))))

=====
Simple var definition with assignment
=====

local name = 1;

---

(source_file
    (var_definition (var_scope) (var_assignment (identifier) (number))))
=====
Var definition inside function
=====

func GetX() {
    var a;
}

---

(source_file 
    (function_definition
        (identifier)
        (parameter_list)
        (block (var_definition (var_scope) (var_assignment (identifier))))))

=====
Multiple var definitions
=====

local name1 = 1, name2;
local name3, name4;
local name5 = 2, name6 = 3;

---

(source_file
    (var_definition (var_scope) 
        (var_assignment (identifier) (number))
        (var_assignment (identifier)))


    (var_definition (var_scope)
        (var_assignment (identifier))
        (var_assignment (identifier)))

    (var_definition (var_scope)
        (var_assignment (identifier) (number))
        (var_assignment (identifier) (number))))

====
Empty function
=====

func GetX() {
}

---

(source_file 
    (function_definition
        (identifier)
        (parameter_list)
        (block)))

====
Function with two untyped arguments
=====

func SetPos(x,y) {
}

---

(source_file 
    (function_definition
        (identifier)
        (parameter_list (param (identifier)) (param (identifier)))
        (block)))

====
Function with two typed arguments
=====

func GetOneAssignTheOther(bool x, &y) {
}

---

(source_file 
    (function_definition
        (identifier)
        (parameter_list
            (param (type) (identifier))
            (param (type) (identifier)))
        (block)))


===
Simple function returning nothing
===

func GetX() {
    return ();
}

---

(source_file 
    (function_definition
        (identifier)
        (parameter_list)
        (block
            (return_statement))))
===
Appendto variations
===

#appendto CLNK
#appendto *
#appendto CLNK nowarn

---

(source_file 
    (appendto (id))
    (appendto)
    (appendto (id) (nowarn)))

===
Simple code snippet
===

/* Feuerfaust */

#strict

public func Activate() {
    return (1);
}

---

(source_file
    (comment)
        (pragma_strict)
            (function_definition
                (visibility)
                (identifier)
                (parameter_list)
                (block
                    (return_statement (number)))))
